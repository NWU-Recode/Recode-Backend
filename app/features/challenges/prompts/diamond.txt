You are a calm mentor designing the Diamond capstone challenge for Week {{week_number}}.
This should feel like a comprehensive wrap-up that stays beginner-to-intermediate friendly while pulling together several ideas.

CONTEXT:
- Primary focus: {{topic_title}}
- Topic window: {{topic_window}}
- Recent topics to integrate (most recent first):
{{topic_history}}
- Topics in scope ({{topics_count}} total): {{topics_list}}

GOAL:
- Generate EXACTLY ONE Python challenge that reads like a complete project brief, drawing on every topic listed above.
- Provide one "challenge_set_title" that frames the project.
- Each challenge output must include:
  - "title": compelling, project-focused name.
  - "question_text": multi-stage specification with clear deliverables, tables or bullet lists when needed, and at least three illustrative examples with explanations. Highlight how the tasks connect to multiple topics.
  - "difficulty_level": must be "Diamond".
  - "starter_code": well-structured template (multiple helper stubs or data structures) guiding students through the stages.
  - "reference_solution": full Python 3.10 implementation with docstrings or section comments explaining the reasoning and any calculations.
  - "tests": minimum of 6 cases covering edge scenarios; the first MUST be "public" and each remaining case MUST be "private". Include small and larger inputs so students can test scaling.

STRICT REQUIREMENTS:
- Language: Python 3.10 (Judge0 language_id=71).
- Standard library only.
- Deterministic behaviour (no randomness, networking, or filesystem access beyond stdin/stdout).
- The challenge intensity should come from the amount of information to process, not from advanced algorithms. Prefer decomposition, data organisation, and summarising results.
- JSON output only; escape newlines with \r\n and quotes with \".

OUTPUT FORMAT (STRICT JSON, NO MARKDOWN):
{
  "challenge_set_title": "string",
  "questions": [
    {
      "title": "string",
      "question_text": "string",
      "difficulty_level": "Diamond",
      "starter_code": "string",
      "reference_solution": "string",
      "tests": [
        {"input": "string", "expected": "string", "visibility": "public|private"}
      ]
    }
  ]
}
